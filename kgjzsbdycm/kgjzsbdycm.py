# -*- coding: utf-8 -*-
"""Visualizations_pyvis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Go2d4-bQ3glBAH8mbdvP4PjmziS6pxey
"""

! pip3 install pyvis

! pip3 install openpyxl

from pyvis.network import Network
import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import numpy as np
import IPython

# Load JSON data from file
import json
with open('Enter your json file containing ontology', 'r') as file:
    ontology = json.load(file)

# Function to count edges between two nodes
def count_edges_between_nodes(net,node1, node2):
    edge_count = 0
    edge1="nan"
    for edge in net.edges:
        if (edge['from'] == node1 and edge['to'] == node2) or (edge['from'] == node2 and edge['to'] == node1):
            edge1=edge
            edge_count += 1
    return edge_count,edge1

def save_ontology_network_html(kb, df, filename):
    # create network
    net = Network(directed=True, width="1000px", height="1000px", bgcolor="#eeeeee",cdn_resources='in_line')
    net1 = Network(directed=False, width="2000px", height="2000px", bgcolor="#eeeeee",cdn_resources='in_line')
    # colour assignment to different nodes
    color_entity = ["#3da831","#00ff1e", "#20B2AA", "#dd4b39", "#00bfff", "#ffc0cb", "#7B68EE", "#9a31a8", "#3155a8", "#DB7093","#00ffff","#7FFFD4","#9ACD32","#808000","#BC8F8F","#FF00FF","#BDB76B","#FFD700","#FFA07A","#FA8072"]
    columns=df.columns
    color={}
    j=0
    print(len(columns))
    for c in columns:
      color[c]=color_entity[j]
      j=j+1

    for r in kb:
      for k in range(0,len(df[r["Source"]])):
        net.add_node(str(df[r["Source"]][k]), shape="dot", color=color[r["Source"]])
        net.add_node(str(df[r["Target"]][k]), shape="dot", color=color[r["Target"]])
        net.add_edge(str(df[r["Source"]][k]), str(df[r["Target"]][k]),
                    title=r["Relationship"], label=r["Relationship"])

    #count the number of edges between two nodes and the relationship
    new_kb=[] # new knowledge base with weights
    for i in range(len(net.nodes)-1):
      for j in range(i+1,len(net.nodes)):

        edge_count,edge = count_edges_between_nodes(net,net.nodes[i]["id"], net.nodes[j]["id"])
        if(edge_count>0):
            new_node={}
            new_node["Source"]=str(net.nodes[i]["id"])
            new_node["Target"]=str(net.nodes[j]["id"])
            new_node["Relationship"]=edge["label"]
            new_node["weight"]=edge_count
            new_node["color_s"]=net.nodes[i]["color"]
            new_node["color_t"]=net.nodes[j]["color"]
            new_kb.append(new_node)

    for r in new_kb:
      net1.add_node(r["Source"], shape="dot", color=r["color_s"])
      net1.add_node(r["Target"], shape="dot", color=r["color_t"])
      net1.add_edge(r["Source"], r["Target"], value=r["weight"],
                  title=r["Relationship"], label=r["Relationship"])
    # save network
    net1.repulsion(
        node_distance=200,
        central_gravity=0.2,
        spring_length=200,
        spring_strength=0.05,
        damping=0.09
    )
    net1.set_edge_smooth('dynamic')
    net1.show(filename,notebook=False)

#read csv file
df = pd.read_excel("Enter the original excel file")
# Convert column names to lowercase
df.columns = map(str.lower, df.columns)
# Convert string values in rows to lowercase
df = df.applymap(lambda x: x.lower() if isinstance(x, str) else x)
df = df.reset_index(drop=True)
df.head(3)

filename = "Enter the html file to save the graph"
save_ontology_network_html(ontology,df,filename=filename)
IPython.display.HTML(filename=filename)