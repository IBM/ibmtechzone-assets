{"id":"rtttrnqumf","title":"Multi-Agent: Code Generation, Review, Execution, Test Case And Documentation","author":"Pinkal Patel","categoryId":1,"description":"This Assest is describing usecase for code genration for complex problem using multi-agent with custome selection techinque and also collect final answer for user.\nIn this usecase, I have used 8 Agents.\nAdmin, Planner, Senior_Python_Engineer, Code_Executor, Code_Reviewer, Test_Cases_Writer, Code_Documentor, Society of Mind\n\nMain Adavantage: Custome Agent Selection Technique and final answer collection\n\nStep to Run:\nStep 1: Run proxy_server.py  (command to run: python3 proxy_server.py --bearer_token {bam_apikey} --api_type bam --api_url https://bam-api.res.ibm.com/v2/text/generation)\nStep 2: Run multi-agent.py\n\nNote:\nproxy_server.py file: Flask API to call Watsonx.AI Model. To use WatsonX.AI for llm model, one wrapper is written on top of this.\n\nLibrary:\npip install pyautogen;\npip install flask","typeId":1,"type":"python","fileName":"multi-agent.py","source":"local","assetURL":"","userId":"7385f3d6-e16e-46b1-8d6f-db731c6f5e19","preRequisites":{"fields":[{"type":"text","label":"bam_api_key"}],"requiredFields":[["bam_api_key"]],"installDependencyCommands":["pip install pyautogen"," pip install flask"]},"updatedTimestamp":1717151058074}