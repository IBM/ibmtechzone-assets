{
  "openapi": "3.0.1",
  "info": {
    "title": "IBM Watson Discovery query endpoint",
    "description": "IBM Watson Discovery simplified API spec for querying.  You can also download the full spec for the entire service by going to https://cloud.ibm.com/apidocs/discovery-data and clicking on the menu in the upper right.",
    "version": "1.1"
  },
  "servers": [
    {
      "url": "https://{discovery_url}",
      "description": "The Watson Discovery URL as specfied in the manage/credentials on IBM Cloud or Cloud Pak for Data",
      "variables": {
        "discovery_url": {
          "default": "api.us-south.discovery.watson.cloud.ibm.com/instances/12345-6789",
          "description": "The portions of the Watson Discovery URL that follow https://"
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "basicAuth": []
    }
  ],
  "externalDocs": {
    "description": "For more information about this service, see docs.",
    "url": "https://cloud.ibm.com/docs/discovery-data",
    "x-release-notes": "https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-release-notes"
  },
  "paths": {
    "/v2/projects/{project_id}/collections/{collection_id}/documents/{document_id}": {
      "get": {
        "operationId": "query",
        "summary": "Query a project",
        "description": "Search your data by submitting queries that are written in natural language or formatted in the Discovery Query Language. For more information, see the [Discovery documentation](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-query-concepts). The default query parameters differ by project type. For more information about the project default settings, see the [Discovery documentation](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-query-defaults). See [the Projects API documentation](#create-project) for details about how to set custom default query settings. \n\nThe length of the UTF-8 encoding of the POST body cannot exceed 10,000 bytes, which is roughly equivalent to 10,000 characters in English.",
        "tags": [
          "Queries"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "Release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. The current version is `2020-08-30`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "project_id",
            "in": "path",
            "description": "The ID of the project. This information can be found from the *Integrate and Deploy* page in Discovery.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "pattern": "^[a-zA-Z0-9_-]*$"
            }
          },
          {
            "name": "collection_id",
            "in": "path",
            "description": "The ID of the collection. This information can be found from the *Integrate and Deploy* page in Discovery.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "pattern": "^[a-zA-Z0-9_-]*$"
            }
          },
          {
            "name": "document_id",
            "in": "path",
            "description": "The ID of the document. This information can be found from the *Integrate and Deploy* page in Discovery.",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "pattern": "^[a-zA-Z0-9_-]*$"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QueryLarge"
        },
        "responses": {
          "200": {
            "description": "Query executed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n\n* Project has no collections.\n\n* A list of document ids is required in **similar.document_ids** when **similar.enabled** is `true`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X GET {auth} \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{ \\\n",
                      "  \\\"collection_ids\\\": [  \\\n",
                      "    \\\"{collection_id_1}\\\", \\\n",
                      "    \\\"{collection_id_2}\\\" \\\n",
                      "  ], \\\n",
                      "  \\\"query\\\": \\\"text:IBM\\\" \\\n",
                      "}\" \\\n",
                      "\"{url}/v2/projects/{project_id}/collections/{collection_id}/documents/{document_id}?version=2023-03-31\""
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Discovery discovery = new Discovery(\"2020-08-30\", authenticator);\n",
                      "discovery.setServiceUrl(\"https://{cpd_cluster_host}{:port}/discovery/{release}/instances/{instance_id}/api\");\n",
                      "\n",
                      "QueryOptions options = new QueryOptions.Builder()\n",
                      "  .projectId(\"{project_id}\")\n",
                      "  .query(\"{field}:{value}\")\n",
                      "  .build();\n",
                      "\n",
                      "QueryResponse response = discovery.query(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const DiscoveryV2 = require('ibm-watson/discovery/v2');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const discovery = new DiscoveryV2({\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "  }),\n",
                      "  version: '2020-08-30',\n",
                      "  serviceUrl: 'https://{cpd_cluster_host}{:port}/discovery/{release}/instances/{instance_id}/api',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  projectId: '{projectId}',\n",
                      "  query: '{field}:{value}',\n",
                      "};\n",
                      "\n",
                      "discovery.query(params)\n",
                      "  .then(response => {\n",
                      "    console.log(JSON.stringify(response.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log('error:', err);\n",
                      "  });\n",
                      ""
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import DiscoveryV2\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "                              '{username}',\n",
                      "                              '{password}',\n",
                      "                              'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "                               disable_ssl_verification=True)\n",
                      "discovery = DiscoveryV2(\n",
                      "  version='2020-08-30',\n",
                      "  authenticator=authenticator\n",
                      ")\n",
                      "discovery.set_service_url('{https://{cpd_cluster_host}{:port}/discovery/{release}/instances/{instance_id}/api}')\n",
                      "\n",
                      "response = discovery.get_document(\n",
                      "  project_id='{project_id}',\n",
                      "  collection_id='{collection_id}',\n",
                      "  document_id='{document_id}',\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))\n",
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "collectionIdsParam": {
        "name": "collection_ids",
        "in": "query",
        "description": "Comma separated list of the collection IDs. If this parameter is not specified, all collections in the project are used.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "collectionIdParam": {
        "name": "collection_id",
        "in": "path",
        "description": "The ID of the collection.",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9_-]*$"
        }
      },
      "documentIdParam": {
        "name": "document_id",
        "in": "path",
        "description": "The ID of the document.",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9_-]*$"
        }
      },
      "acFieldParam": {
        "name": "field",
        "in": "query",
        "description": "The field in the result documents that autocompletion suggestions are identified from.",
        "schema": {
          "type": "string"
        }
      },
      "acPrefixParam": {
        "name": "prefix",
        "in": "query",
        "description": "The prefix to use for autocompletion. For example, the prefix `Ho` could autocomplete to `hot`, `housing`, or `how`.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "acCountParam": {
        "name": "count",
        "in": "query",
        "description": "The number of autocompletion suggestions to return.",
        "schema": {
          "type": "integer",
          "default": 5
        }
      },
      "filterParam": {
        "name": "filter",
        "in": "query",
        "description": "Searches for documents that match the Discovery Query Language criteria that is specified as input. Filter calls are cached and are faster than query calls because the results are not ordered by relevance. When used with the `aggregation`, `query`, or `natural_language_query` parameters, the `filter` parameter runs first. This parameter is useful for limiting results to those that contain specific metadata values.",
        "schema": {
          "type": "string"
        }
      },
      "queryParam": {
        "name": "query",
        "in": "query",
        "description": "A query search that is written in the Discovery Query Language and returns all matching documents in your data set with full enrichments and full text, and with the most relevant documents listed first.",
        "schema": {
          "type": "string"
        }
      },
      "nlqParam": {
        "name": "natural_language_query",
        "in": "query",
        "description": "A natural language query that returns relevant documents by using training data and natural language understanding.",
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 2048
        }
      },
      "countParam": {
        "name": "count",
        "in": "query",
        "description": "Number of results to return. The maximum for the **count** and **offset** values together in any one query is **10,000**",
        "schema": {
          "type": "integer",
          "default": 10
        }
      },
      "offsetParam": {
        "name": "offset",
        "in": "query",
        "description": "The number of query results to skip at the beginning. For example, if the total number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the **count** and **offset** values together in any one query is **10000**",
        "schema": {
          "type": "integer"
        }
      },
      "docCountParam": {
        "name": "count",
        "in": "query",
        "description": "The maximum number of documents to return. Up to 1,000 documents are returned by default. The maximum number allowed is 10,000.",
        "schema": {
          "type": "integer",
          "default": 1000
        }
      }
    },
    "requestBodies": {
      "QueryLarge": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QueryLarge"
            }
          }
        },
        "description": "An object that represents the query to be submitted."
      }
    },
    "schemas": {
      "QueryResponse": {
        "type": "object",
        "description": "A response that contains the documents and aggregations for the query.",
        "properties": {
          "document_id": {
            "description": "document id ",
            "type": "integer",
            "format": "int32"
          },
          "filename": {
            "type": "string",
            "description": "Suggested correction to the submitted **natural_language_query** value."
          },
          "file_type": {
            "type": "string",
            "description": "Suggested correction to the submitted **natural_language_query** value."
          }
        },
        "example": {
          "document_id": 24,
          "filename": "filename-generated",
          "file_type": "filetype-generated"
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Error response information",
        "required": [
          "code",
          "error"
        ],
        "properties": {
          "code": {
            "description": "The HTTP error status code.",
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 600
          },
          "error": {
            "description": "A message describing the error.",
            "type": "string"
          }
        }
      },
      "QueryLarge": {
        "type": "object",
        "description": "Object that describes a long query.",
        "properties": {
          "document_id": {
            "type": "integer",
            "description": "document_id"
          },
          "filename": {
            "type": "string",
            "description": "filename"
          },
          "file_type": {
            "type": "string",
            "description": "file_type"
          }
        }}
    }
  }
}
