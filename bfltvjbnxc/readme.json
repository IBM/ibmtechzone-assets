{"id":"bfltvjbnxc","title":"Multi-Agent Using Autogen library with WatsonX.AI","author":"Pinkal Patel","categoryId":13,"description":"Perform python code generation, testcase written, code reviewer, code documentation and code executor based on given problem statment. \nIn this task, multiple agent is going to communicate with each other, verify task completion and report to admin.\nIn this usecase, I have used 7 Agents.\n1. Admin: \n2. Planner: Who plan the whole tasks based on given problem statment.\n3. Senior_Python_Engineer: \n4. Code_Executor: \n5. Code_Reviewer: \n6. Test_Cases_Writer: \n7. Code_Documentor: \n\nStep to Run:\nStep 1: Run proxy_server.py  (command to run: python3 proxy_server.py --bearer_token {bam_apikey} --api_type bam --api_url https://bam-api.res.ibm.com/v2/text/generation)\nStep 2: Run multi-agent.py\n\nNote:\nproxy_server.py file: Flask API to call Watsonx.AI Model. To use WatsonX.AI for llm model, one wrapper is written on top of this.\n","typeId":1,"type":"python","fileName":"multi-agent.py","source":"local","assetURL":"","userId":"7385f3d6-e16e-46b1-8d6f-db731c6f5e19","preRequisites":{"fields":[{"type":"text","label":"BAM API_KEY"}],"requiredFields":[["bam_api_key"]],"installDependencyCommands":["pip install pyautogen"," pip install flask"]},"updatedTimestamp":1716284496893}